#!/bin/sh
#
# toggle process
# try to hide but kill if needed

processes=$@

# no argument, exit
if [ -z $processes ]; then
    exit
fi

function do_toggle {
    process=$1
    action_on=${2:-""}
    action_off=${3:-""}

    if pgrep -x $process >/dev/null; then
        $action_off;
        notify-send "$process off"
    else
        $action_on;
        notify-send "$process on"
    fi
}

# Not actually using redshift but oled-linux, and we don't want to turn it off.
# Instead we just change the config. Also handle is another toggle command is
# provided. This is used for ~movie mode~ :]
function redshift_toggle {
    if grep 'use_redshift=true' ~/.config/oled-linux.conf >/dev/null; then
        sed -i "/use_redshift/s/use_redshift=true/use_redshift=false/" ~/.config/oled-linux.conf
        xbacklight -dec 5 && xbacklight -inc 5
        notify-send "redshift off"
        if [ $# > 0 ]; then
            $1
        fi
    else
        sed -i "/use_redshift/s/use_redshift=false/use_redshift=true/" ~/.config/oled-linux.conf
        xbacklight -dec 5 && xbacklight -inc 5
        notify-send "redshift on"
        if [ $# > 0 ]; then
            $1
        fi
    fi
}

for process in $processes; do
    function kill_command {
        killall $process
    }

    function start_command {
        background $process
    }

    function xautolock_command {
        do_toggle "xautolock" 'background xautolock -time 30 -locker slock' kill_command
    }

    case $process in
        polybar)
            do_toggle $process 'refresh polybar' kill_command
            ;;
        redshift)
            redshift_toggle
            ;;
        movie)
            redshift_toggle xautolock_command
            ;;
        xautolock)
            xautolock_command
            ;;
        *)
            do_toggle $process start_command kill_command
            ;;
    esac
done
